{
  "version": 3,
  "sources": ["../../client/src/ColorTube.ts", "../../client/src/load_image.ts", "../../client/src/vertices_blue_left.ts", "../../client/src/vertices_blue_right.ts", "../../client/src/vertices_fuel_1.ts", "../../client/src/vertices_fuel_2_left.ts", "../../client/src/vertices_fuel_2_right.ts", "../../client/src/vertices_green_left.ts", "../../client/src/vertices_green_right.ts", "../../client/src/vertices_red_left.ts", "../../client/src/vertices_red_right.ts", "../../client/src/vertices_tablet_1.ts", "../../client/src/vertices_tablet_2.ts", "../../client/src/vertices_tablet_3.ts", "../../client/src/vertices_tablet_4.ts", "../../client/src/vertices_tablet_5.ts", "../../client/src/vertices_tablet_6.ts", "../../client/src/vertices_tablet_7.ts", "../../client/src/vertices_tablet_8.ts", "../../client/src/vertices_tablet_9.ts", "../../client/src/animate_fuel.ts", "../../client/src/WinState.ts", "../../client/src/ComputerController.ts", "../../client/src/write_output_to_data.ts", "../../client/src/MatrixInfo.ts", "../../client/src/Reconstruction.ts", "../../client/src/image_to_samples.ts", "../../client/src/puzzles.ts", "../../client/src/answer_to_byte_pattern.ts", "../../client/src/adjust_samples_for_current_guess.ts", "../../client/src/filter_text_input.ts", "../../client/src/globals.ts", "../../client/src/Controller.ts", "../../client/src/load_tensor.ts", "../../client/src/get_models_and_data.ts", "../../client/src/index.ts"],
  "sourcesContent": ["export interface ColorTube {\n  x: number;\n  y: number;\n  color: \"red\" | \"blue\" | \"green\";\n  height: number;\n}\nconst color_to_sx_sy = {\n  blue: {\n    sx: 0,\n    sy: 0,\n  },\n  green: {\n    sx: 512,\n    sy: 0,\n  },\n  red: {\n    sx: 0,\n    sy: 512,\n  },\n};\n\nexport interface DrawInput {\n  context: CanvasRenderingContext2D;\n  tube_images: HTMLImageElement;\n}\n\nexport const draw_tube = (\n  { context, tube_images }: DrawInput,\n  tube: ColorTube\n) => {\n  const { sx, sy } = color_to_sx_sy[tube.color];\n  const index = Math.min(29, Math.floor(30 * (tube.height)));\n  const x = sx + (index % 6) * 86;\n  const y = sy + Math.floor(index / 6) * 86;\n  context.drawImage(tube_images, x, y, 86, 86, tube.x, tube.y, 86, 86);\n};\n", "export const load_image = (path: string) => {\n  const image = new Image();\n  image.src = path;\n  return image;\n};\n", "export const vertices = [[205, 850], [197, 863], [199, 868], [198, 873], [201, 878], [203, 882], [202, 888], [207, 892], [205, 898], [199, 902], [201, 913], [200, 918], [187, 930]];", "export const vertices = [[298, 853], [292, 860], [287, 871], [287, 876], [288, 883], [289, 885], [292, 888], [295, 893], [301, 899], [306, 899], [310, 902], [309, 909], [311, 913], [316, 919], [324, 921], [329, 919], [334, 920], [338, 923], [350, 918], [358, 926], [355, 930]];", "export const vertices = [\n  [96, 159],\n  [92, 162],\n  [87, 168],\n  [82, 176],\n  [81, 178],\n  [83, 185],\n  [79, 192],\n  [74, 201],\n  [76, 209],\n  [73, 217],\n  [70, 226],\n  [71, 234],\n  [72, 243],\n  [71, 250],\n  [71, 258],\n  [72, 271],\n  [71, 277],\n  [71, 284],\n  [70, 291],\n  [70, 298],\n  [69, 305],\n  [67, 311],\n  [66, 319],\n  [65, 327],\n  [64, 335],\n  [63, 342],\n  [63, 350],\n  [63, 358],\n  [65, 368],\n  [63, 380],\n  [62, 390],\n  [62, 401],\n  [60, 410],\n  [62, 418],\n  [68, 425],\n  [67, 434],\n  [72, 439],\n  [76, 445],\n  [82, 453],\n  [87, 462],\n  [98, 470],\n  [108, 469],\n  [111, 473],\n  [119, 482],\n  [127, 486],\n  [136, 487],\n  [144, 492],\n  [153, 497],\n  [157, 506],\n  [162, 515],\n  [167, 522],\n  [178, 527],\n  [183, 530],\n  [192, 534],\n  [200, 539],\n  [208, 542],\n  [212, 545],\n  [216, 546],\n  [217, 551],\n  [219, 557],\n  [222, 559],\n  [226, 561],\n  [228, 564],\n  [231, 567],\n  [234, 568],\n  [238, 568],\n  [239, 565],\n  [240, 563],\n  [239, 556],\n  [243, 557],\n  [242, 551],\n  [241, 546],\n  [238, 543],\n  [235, 540],\n];\n", "export const vertices = [[215, 695], [217, 702], [218, 708], [217, 717], [219, 724], [226, 735], [230, 743], [233, 748], [236, 750], [238, 761], [239, 769], [237, 786], [236, 789], [237, 797], [234, 801], [228, 807], [223, 820]];", "export const vertices = [[293, 695], [294, 705], [295, 712], [294, 717], [291, 722], [284, 734], [281, 740], [281, 750], [280, 759], [279, 764], [277, 769], [276, 779], [279, 786], [273, 790], [271, 796], [270, 800], [268, 803], [267, 808], [266, 811], [264, 815], [264, 821], [266, 824], [273, 824], [282, 826], [285, 827], [292, 828]];", "export const vertices = [[197, 828], [193, 825], [189, 825], [185, 826], [180, 826], [171, 820], [167, 820], [163, 816], [156, 816], [149, 818], [144, 819], [138, 817], [134, 812], [129, 807], [123, 807], [117, 805], [113, 802], [110, 800], [108, 797], [102, 790], [96, 790], [90, 792], [87, 797]];", "export const vertices = [[322, 843], [328, 847], [332, 850], [334, 851], [340, 853], [345, 848], [350, 847], [354, 844], [360, 839], [365, 840], [373, 838], [377, 836], [383, 833], [387, 832], [394, 825], [396, 823], [397, 816], [397, 813], [397, 807], [396, 802], [399, 798], [405, 793], [412, 790], [415, 788], [417, 784], [424, 785], [431, 788], [435, 797]];", "export const vertices = [[209, 821], [207, 812], [206, 808], [206, 799], [202, 796], [201, 791], [194, 785], [191, 781], [194, 771], [192, 767], [190, 763], [189, 752], [183, 754], [177, 752], [174, 749], [171, 747], [168, 743], [163, 735], [157, 736], [150, 739], [147, 744]];", "export const vertices = [[301, 820], [302, 815], [302, 810], [308, 798], [308, 797], [311, 790], [313, 783], [313, 777], [315, 771], [315, 768], [316, 761], [319, 754], [320, 749], [322, 745], [327, 737], [333, 735], [341, 733], [348, 735], [355, 738], [358, 742], [359, 748], [361, 751]];", "export const vertices = [[111, 118], [105, 118], [97, 119]];", "export const vertices = [[112, 84], [103, 84], [103, 68], [97, 68]];", "export const vertices = [[155, 32], [155, 25], [187, 24], [187, 18]];", "export const vertices = [[167, 202], [167, 207], [167, 209], [167, 217]];", "export const vertices = [[204, 203], [204, 209], [204, 217], [204, 209]];", "export const vertices = [[281, 104], [285, 104], [290, 104], [305, 104], [321, 104], [337, 104], [352, 105], [352, 98], [352, 92], [341, 92], [331, 92], [331, 88], [331, 83], [356, 83], [380, 84], [380, 71], [380, 58], [365, 57], [350, 57], [349, 48], [349, 39], [361, 39], [373, 39], [372, 31], [372, 24], [369, 24], [366, 24], [365, 21], [365, 18]];", "export const vertices = [[288, 104], [288, 116], [307, 117], [327, 117], [327, 135], [337, 134], [337, 147], [359, 146], [381, 146], [381, 135], [369, 134], [369, 118], [374, 117], [374, 106]];", "export const vertices = [[430, 134], [415, 134], [400, 134], [401, 117], [396, 117], [396, 107], [412, 106], [412, 92], [405, 91], [405, 85], [414, 84], [414, 69], [426, 67], [426, 58], [415, 58], [404, 58], [404, 49], [404, 40], [417, 40], [430, 39]];", "export const vertices = [[323, 17], [323, 24], [310, 25], [297, 25], [297, 40], [307, 40], [307, 56], [320, 56], [321, 67], [334, 67], [348, 67], [362, 67], [375, 67], [389, 67], [403, 67], [416, 67], [430, 68]];", "import { vertices as blue_left } from \"./vertices_blue_left\";\nimport { vertices as blue_right } from \"./vertices_blue_right\";\nimport { vertices as fuel_1 } from \"./vertices_fuel_1\";\nimport { vertices as fuel_2_left } from \"./vertices_fuel_2_left\";\nimport { vertices as fuel_2_right } from \"./vertices_fuel_2_right\";\nimport { vertices as green_left } from \"./vertices_green_left\";\nimport { vertices as green_right } from \"./vertices_green_right\";\nimport { vertices as red_left } from \"./vertices_red_left\";\nimport { vertices as red_right } from \"./vertices_red_right\";\nimport { vertices as tablet_1 } from \"./vertices_tablet_1\";\nimport { vertices as tablet_2 } from \"./vertices_tablet_2\";\nimport { vertices as tablet_3 } from \"./vertices_tablet_3\";\nimport { vertices as tablet_4 } from \"./vertices_tablet_4\";\nimport { vertices as tablet_5 } from \"./vertices_tablet_5\";\nimport { vertices as tablet_6 } from \"./vertices_tablet_6\";\nimport { vertices as tablet_7 } from \"./vertices_tablet_7\";\nimport { vertices as tablet_8 } from \"./vertices_tablet_8\";\nimport { vertices as tablet_9 } from \"./vertices_tablet_9\";\n\nexport interface FuelAnimation {\n  time: number;\n  color: string;\n}\n\nexport const animate_particle_along_path = (\n  context: CanvasRenderingContext2D,\n  time: number,\n  total_time: number,\n  path: number[][],\n  size: number\n) => {\n  const vertex_index = (path.length * time) / total_time;\n  if (vertex_index >= path.length - 1 || vertex_index < 0) {\n    return;\n  }\n  const vertex_index_floor = Math.floor(vertex_index);\n  const vertex_index_ceil = Math.ceil(vertex_index);\n  const vertex_index_fraction = vertex_index - vertex_index_floor;\n\n  const vertex = path[vertex_index_floor];\n  const vertex_next = path[vertex_index_ceil];\n\n  const x =\n    vertex[0] + (vertex_next[0] - vertex[0]) * vertex_index_fraction - size / 2;\n  const y =\n    vertex[1] + (vertex_next[1] - vertex[1]) * vertex_index_fraction - size / 2;\n  context.fillRect(x, y, size, size);\n};\n\nexport const animate_fuel = (\n  context: CanvasRenderingContext2D,\n  { time, color }: FuelAnimation\n) => {\n  context.fillStyle = color;\n\n  const short_table_paths = [tablet_1, tablet_2, tablet_3, tablet_4, tablet_5];\n  for (const path of short_table_paths) {\n    for (let i = 0; i < 5; i++) {\n      animate_particle_along_path(context, time - i * 1, 2, path, 5);\n    }\n  }\n  const long_table_paths = [tablet_6, tablet_7, tablet_8, tablet_9];\n  for (const path of long_table_paths) {\n    for (let i = 0; i < 12; i++) {\n      animate_particle_along_path(context, time - i * 0.4, 3, path, 5);\n    }\n  }\n\n  time = time - 1.5;\n\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, fuel_1, 8);\n  }\n\n  time = time - 2.5;\n\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, fuel_2_left, 5);\n  }\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, fuel_2_right, 5);\n  }\n\n  time = time - 1.5;\n\n  context.fillStyle = \"red\";\n\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, red_left, 5);\n  }\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, red_right, 5);\n  }\n  context.fillStyle = \"green\";\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, green_left, 5);\n  }\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, green_right, 5);\n  }\n  context.fillStyle = \"blue\";\n\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, blue_left, 5);\n  }\n  for (let i = 0; i < 25; i++) {\n    animate_particle_along_path(context, time - i * 0.2, 2, blue_right, 5);\n  }\n};\n", "export type You_Win_State =\n  | {\n      type: \"not_won\";\n    }\n  | {\n      type: \"waiting_for_big_button\";\n      time: number;\n    }\n  | {\n      type: \"won\";\n      time: number;\n    };\n\nexport const update_win_state = (\n  state: You_Win_State,\n  timeIncrement: number\n) => {\n  switch (state.type) {\n    case \"not_won\":\n      return;\n    case \"waiting_for_big_button\":\n      state.time += timeIncrement;\n      return;\n    case \"won\":\n      state.time += timeIncrement;\n      return;\n  }\n};\n\nexport interface DrawInput {\n  context: CanvasRenderingContext2D;\n  big_button_context: CanvasRenderingContext2D;\n  win_state: You_Win_State;\n  win_images: HTMLImageElement;\n}\n\nconst draw_big_button = (\n  { big_button_context, win_images }: DrawInput,\n  time: number\n) => {\n  const frame = Math.floor(time * 5) % 10;\n  const x = 256 * (frame % 4);\n  const y = 256 * (Math.floor(frame / 4) + 1);\n  big_button_context.clearRect(0, 0, 256, 256);\n\n  big_button_context.drawImage(win_images, x, y, 256, 256, 0, 0, 256, 256);\n};\n\nconst draw_win_animation = (\n  { context, win_images }: DrawInput,\n  time: number\n) => {\n  const frame = Math.min(14, Math.floor(time * 15));\n  const x = 128 * (frame % 8);\n  const y = 128 * Math.floor(frame / 8);\n  context.drawImage(\n    win_images,\n    x,\n    y,\n    128,\n    128,\n    256 - 128,\n    1024 - 400,\n    256,\n    256\n  );\n};\n\nexport const draw_win_state = (input: DrawInput) => {\n  const { win_state, big_button_context } = input;\n  switch (win_state.type) {\n    case \"not_won\":\n      return;\n    case \"waiting_for_big_button\":\n      draw_big_button(input, win_state.time);\n      return;\n    case \"won\":\n      draw_win_animation(input, win_state.time);\n      return;\n  }\n};\n", "import { ColorTube, draw_tube } from \"./ColorTube\";\nimport { load_image } from \"./load_image\";\nimport { animate_fuel, FuelAnimation } from \"./animate_fuel\";\nimport { draw_win_state, update_win_state, You_Win_State } from \"./WinState\";\n\nconst colors = [\n  \"#FF6E40\",\n  \"#04E762\",\n  \"#BD10E0\",\n  \"#50E3C2\",\n  \"#FFD300\",\n  \"#E86363\",\n  \"#8B572A\",\n  \"#B8E986\",\n  \"#9013FE\",\n  \"#4A90E2\",\n  \"#F5A623\",\n];\n\nexport class ComputerController {\n  output_canvas: HTMLCanvasElement = document.getElementById(\n    \"canvas\"\n  ) as HTMLCanvasElement;\n\n  canvas: HTMLCanvasElement = document.getElementById(\n    \"computer_canvas\"\n  ) as HTMLCanvasElement;\n  context: CanvasRenderingContext2D = this.canvas.getContext(\"2d\")!;\n\n  big_button_canvas: HTMLCanvasElement = document.getElementById(\n    \"big-button-canvas\"\n  ) as HTMLCanvasElement;\n  big_button_context: CanvasRenderingContext2D =\n    this.big_button_canvas.getContext(\"2d\")!;\n\n  win_letter: HTMLDivElement = document.getElementById(\n    \"win-letter\"\n  ) as HTMLDivElement;\n\n  big_button: HTMLButtonElement = document.getElementById(\n    \"big-button\"\n  ) as HTMLButtonElement;\n\n  computer_image: HTMLImageElement = load_image(\"static/computer0001.png\");\n  tube_images: HTMLImageElement = load_image(\"static/tubes.png\");\n\n  win_images: HTMLImageElement = load_image(\"static/win.png\");\n\n  tubes: ColorTube[] = [\n    {\n      x: 103,\n      y: 697,\n      color: \"red\",\n      height: 0.0,\n    },\n    {\n      x: 35,\n      y: 742,\n      color: \"green\",\n      height: 0,\n    },\n    {\n      x: 135,\n      y: 875,\n      color: \"blue\",\n      height: 0.0,\n    },\n    {\n      x: 315,\n      y: 689,\n      color: \"red\",\n      height: 0.0,\n    },\n    {\n      x: 400,\n      y: 742,\n      color: \"green\",\n      height: 0.0,\n    },\n    {\n      x: 316,\n      y: 875,\n      color: \"blue\",\n      height: 0.0,\n    },\n  ];\n\n  scanlines = load_image(\"static/scanlines.png\");\n\n  constructor() {\n    const ratio = window.devicePixelRatio || 1;\n    this.context.imageSmoothingEnabled = false;\n    const canvasRect = this.canvas.getBoundingClientRect();\n    canvasRect.width;\n    const terminal = document.getElementById(\"terminal\")!;\n    //If canvas has been scaled, we need to scale the terminal as well\n    terminal.style.left = 113 * (canvasRect.width / 512) + \"px\";\n    terminal.style.top = 256 * (canvasRect.height / 1024) + \"px\";\n    terminal.style.width = 265 * (canvasRect.width / 512) + \"px\";\n    terminal.style.height = 168 * (canvasRect.height / 1024) + \"px\";\n    this.big_button.addEventListener(\"click\", this.big_button_click);\n    requestAnimationFrame(this.update_and_draw);\n  }\n  color_index = 0;\n\n  on_puzzle_solved = () => {\n    this.fuel_animation.push({\n      time: 0,\n      color: colors[this.color_index],\n    });\n    this.color_index = (this.color_index + 1) % colors.length;\n  };\n\n  play_win_animation = () => {\n    if (this.win_state.type != \"not_won\") {\n      return;\n    }\n    this.big_button.style.display = \"unset\";\n    this.win_state = {\n      type: \"waiting_for_big_button\",\n      time: 0,\n    };\n  };\n  big_button_click = () => {\n    if (this.win_state.type != \"waiting_for_big_button\") {\n      return;\n    }\n    this.win_state = {\n      type: \"won\",\n      time: 0,\n    };\n    this.win_letter.style.display = \"unset\";\n  };\n\n  fuel_animation: FuelAnimation[] = [];\n\n  lastFrameTime: number | null = null;\n  timeSinceLastAnimationFrame: number = 0;\n\n  win_state: You_Win_State = {\n    type: \"not_won\",\n  };\n\n  update_and_draw = async (totalTimeElapsed: number) => {\n    const timeDifference =\n      this.lastFrameTime == null ? 0 : totalTimeElapsed - this.lastFrameTime;\n    this.lastFrameTime = totalTimeElapsed;\n    const timeIncrement = timeDifference / 1000;\n\n    this.context.clearRect(0, 0, 512, 1024);\n    this.context.drawImage(this.computer_image, 0, 0);\n\n    for (const tube of this.tubes) {\n      draw_tube(this, tube);\n    }\n\n    this.context.fillStyle = `rgb(${(this.tubes[0].height / 0.7) * 255}, ${\n      (this.tubes[1].height / 0.7) * 255\n    }, ${(this.tubes[2].height / 0.7) * 255})`;\n    this.context.beginPath();\n\n    this.context.ellipse(214, 836, 14, 14, 0, 0, 2 * Math.PI);\n    this.context.fill();\n\n    this.context.fillStyle = `rgb(${(this.tubes[3].height / 0.7) * 255}, ${\n      (this.tubes[4].height / 0.7) * 255\n    }, ${(this.tubes[5].height / 0.7) * 255})`;\n    this.context.beginPath();\n\n    this.context.ellipse(306, 838, 14, 14, 0, 0, 2 * Math.PI);\n    this.context.fill();\n\n    this.context.font = \"60px Mono\";\n\n    this.context.drawImage(this.output_canvas, 132, 50, 128, 128);\n\n    // for (let i = 0; i < vertices.length; i++) {\n    //   const [x, y] = vertices[i];\n    //   this.context.fillStyle = \"white\";\n    //   this.context.fillRect(x, y, 1, 1);\n    //   this.context.font = \"16px Mono\";\n    //   this.context.fillStyle = \"green\";\n    //   this.context.fillText(`${i}`, x, y);\n    // }\n    const indices_to_remove: number[] = [];\n    for (let i = 0; i < this.fuel_animation.length; i++) {\n      const fuel = this.fuel_animation[i];\n      fuel.time += timeIncrement;\n      animate_fuel(this.context, fuel);\n      if (fuel.time > 12) {\n        indices_to_remove.push(i);\n      }\n    }\n    for (const index of indices_to_remove.reverse()) {\n      this.fuel_animation.splice(index, 1);\n    }\n    if (indices_to_remove.length > 0) {\n      for (const tube of this.tubes) {\n        tube.height = Math.min(\n          0.7,\n          tube.height + 0.1 * indices_to_remove.length\n        );\n      }\n    }\n    update_win_state(this.win_state, timeIncrement);\n    draw_win_state(this);\n\n    // this.context.drawImage(this.output_canvas, 164, 82, 64, 64);\n    // this.context.drawImage(this.scanlines, 0, 0, 128, 128, 132, 50, 128, 128);\n\n    requestAnimationFrame(this.update_and_draw);\n  };\n}\n", "import { MatrixInfo } from \"./MatrixInfo\";\n\n\nexport const write_output_to_data = (matrix_info: MatrixInfo, output: Float32Array, data: ImageData) => {\n  for (let i = 0; i < matrix_info.number_of_elements; i++) {\n    const value = output[i];\n    data.data[i * 4] = value;\n    data.data[i * 4 + 1] = value;\n    data.data[i * 4 + 2] = value*0.4;\n    data.data[i * 4 + 3] = 255;\n  }\n};\n", "export interface MatrixInfo {\n  number_of_elements: number;\n  number_of_measurements: number;\n}\n\nexport const make_matrix_info = (size: number): MatrixInfo => {\n  return {\n    number_of_elements: size * size,\n    number_of_measurements: (size * size) / 4,\n  };\n};\n", "import { Tensor, InferenceSession } from \"onnxruntime-web\";\nimport { write_output_to_data } from \"./write_output_to_data\";\nimport { MatrixInfo, make_matrix_info } from \"./MatrixInfo\";\nexport declare const ort: typeof import(\"onnxruntime-web\");\n\nexport class Reconstruction {\n  done = false;\n\n  reconstruction: Tensor;\n  previous_diffs: Tensor;\n  iteration = 0;\n\n  start_time = performance.now();\n  matrix_info: MatrixInfo;\n\n  constructor(\n    public readonly size: number,\n    public readonly samples: Tensor,\n    public readonly model: InferenceSession,\n    public readonly reconstruct: InferenceSession,\n    public readonly number_of_iterations: number\n  ) {\n    this.matrix_info = make_matrix_info(size);\n    this.reconstruction = new ort.Tensor(\n      new Float32Array(this.matrix_info.number_of_elements)\n    );\n    this.previous_diffs = new ort.Tensor(\n      new Float32Array(this.matrix_info.number_of_elements)\n    );\n  }\n\n  update = async () => {\n    if (this.done) {\n      return;\n    }\n    const stop_iteration = this.iteration + 5;\n    for (\n      ;\n      this.iteration < this.number_of_iterations &&\n      this.iteration < stop_iteration;\n      this.iteration++\n    ) {\n      const output = await this.model.run({\n        samples: this.samples,\n        \"reconstruction.1\": this.reconstruction,\n        previous_diffs: this.previous_diffs,\n      });\n      this.reconstruction = output.reconstruction;\n      this.previous_diffs = output.diffs;\n    }\n    if (this.iteration < this.number_of_iterations) {\n      return;\n    }\n    console.log(performance.now() - this.start_time);\n    this.done = true;\n  };\n  draw = async (to: ImageData) => {\n    if (this.done) {\n      return;\n    }\n    const output = await this.reconstruct.run({\n      reconstruction: this.reconstruction,\n    });\n    console.log(this.matrix_info.number_of_elements)\n    write_output_to_data(this.matrix_info, output.image.data, to);\n  };\n}\n", "import { InferenceSession } from \"onnxruntime-web\";\nexport declare const ort: typeof import(\"onnxruntime-web\");\n\nexport const image_to_samples = async (\n  image: HTMLImageElement,\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  context: CanvasRenderingContext2D,\n  sample_func: InferenceSession\n) => {\n  context.clearRect(0, 0, 32, 32);\n  context.drawImage(image, x, y, w, h, 0, 0, 32, 32);\n  const image_data = context.getImageData(0, 0, 32, 32);\n  const out_data = new Uint8Array(image_data.data.byteLength / 4);\n  for (let i = 0, k = 0; i < image_data.data.length; i += 4, k++) {\n    /**\n     * RGBA to grayscale\n     */\n    out_data[k] =\n      image_data.data[i] * 0.2126 +\n      image_data.data[i + 1] * 0.7152 +\n      image_data.data[i + 2] * 0.0722;\n  }\n  const image_tensor = new ort.Tensor(out_data);\n\n  const result = await sample_func.run({\n    image: image_tensor,\n  });\n  return result.samples;\n};\n", "export interface Puzzle {\n  question: string;\n  answer: string;\n  image_index: number;\n  solved?: boolean;\n}\n\nexport const puzzles: {\n  [key: number]: Puzzle;\n} = {\n  0: {\n    question:\n      \"A symbol of spring, and new beginnings too, What am I, that chews on a carrot or two?\",\n    answer: \"rabbit\",\n    image_index: 161,\n  },\n  1: {\n    question:\n      \"A suit of steel, to protect and defend, Against weapons and arrows, until the end\",\n    answer: \"armor\",\n    image_index: 92,\n  },\n  2: {\n    question:\n      \"It guides your path, and tells you the way, North, South, East, or West, it never strays\",\n    answer: \"compass\",\n    image_index: 140,\n  },\n  3: {\n    question:\n      \"A gooey creature, that oozes and flows, It jiggles and wiggles, wherever it goes\",\n    answer: \"slime\",\n    image_index: 169,\n  },\n  4: {\n    question:\n      \"A garment that covers, the upper part of the skin, It's worn with ease, and comes in all kinds of grin\",\n    answer: \"shirt\",\n    image_index: 89,\n  },\n  5: {\n    question:\n      \"Without them, we'd crumble, and fall to the ground, What am I, that makes us stand tall and resound?\",\n    answer: \"bone\",\n    image_index: 130,\n  },\n  6: {\n    question:\n      \"With no legs to be found, It moves with grace, all over the ground\",\n    answer: \"serpent\",\n    image_index: 164,\n  },\n  7: {\n    question:\n      \"It creeps and crawls, with no sound or noise, Waiting for dinner, to make its choice.\",\n    answer: \"spider\",\n    image_index: 155,\n  },\n  8: {\n    question:\n      \"A wall of defense, against the enemy's might, It blocks their attacks, and protects the fight\",\n    answer: \"shield\",\n    image_index: 110,\n  },\n  9: {\n    question:\n      \"If you have me, you want to share me, if you share me, you haven't got me. What am I?\",\n    answer: \"secret\",\n    image_index: 151,\n  },\n  10: {\n    question:\n      \"It creeps through the desert, with a venomous trail. If you feel its sting, you will wail\",\n    answer: \"scorpion\",\n    image_index: 170,\n  },\n  11: {\n    question:\n      \"Wrapped in linen, with a curse bold, It rests in its tomb, with secrets untold\",\n    answer: \"pharaoh\",\n    image_index: 173,\n  },\n  12: {\n    question:\n      \"A symbol of hope, and a wonder so vast, What am I that lasts and lasts?\",\n    answer: \"star\",\n    image_index: 31,\n  },\n  13: {\n    question:\n      \"A container of riches, and memories so fair, It's locked and secured, with treasures so rare\",\n    answer: \"chest\",\n    image_index: 32,\n  },\n  14: {\n    question:\n      \"No wealth, no power, no fame can escape, Its grasp, it comes for all, both young and old\",\n    answer: \"death\",\n    image_index: 129,\n  },\n  15: {\n    question:\n      \"A symbol of power, and a way to be bold, What am I, the means to protect, or conquer and hold?\",\n    answer: \"blade\",\n    image_index: 62,\n  },\n  16: {\n    question:\n      \"A being of terror, that haunts the night, Its form is grotesque, with a chilling sight\",\n    answer: \"monster\",\n    image_index: 175,\n  },\n  17: {\n    question:\n      \"A symbol of unity, and a way to show pride, What am I, a flag of glory, that stands on high with stride?\",\n    answer: \"banner\",\n    image_index: 142,\n  },\n  18: {\n    question:\n      \"A wand of enchantment, that holds untold sway, a tool of wizards, that casts spells every day?\",\n    answer: \"staff\",\n    image_index: 117,\n  },\n  19: {\n    question:\n      \"A length of parchment, that holds a tale, It rolls and unrolls, like the wind in a gale\",\n    answer: \"scroll\",\n    image_index: 50,\n  },\n  20: {\n    question:\n      \"Small and delicate, with a cap so round, It pops up from the ground, without a sound\",\n    answer: \"shroom\",\n    image_index: 160,\n  },\n  21: {\n    question:\n      \"I am cold and still. In the ground, I lay, Until I decompose and spill.\",\n    answer: \"corpse\",\n    image_index: 178,\n  },\n  22: {\n    question:\n      \"A thinking being, with a soul and a heart, With the power to love, and the will to be smart\",\n    answer: \"man\",\n    image_index: 141,\n  },\n  23: {\n    question:\n      \"Ticking away, with a dangerous spark, It can bring down buildings, tear them apart\",\n    answer: \"bomb\",\n    image_index: 82,\n  },\n  24: {\n    question:\n      \"With tusks so sharp, and a bristly mane, It roams through the forest, and causes some pain\",\n    answer: \"boar\",\n    image_index: 166,\n  },\n  25: {\n    question:\n      \"With many legs, it moves so fast, Through the dirt and undergrowth it's cast\",\n    answer: \"centiped\",\n    image_index: 158,\n  },\n  26: {\n    question:\n      \"With bow in hand, and arrow nocked tight, They aim for the target, with unerring sight\",\n    answer: \"archer\",\n    image_index: 148,\n  },\n  27: {\n    question:\n      \"It's beyond imagination, its essence indescribable, With a mere glimpse, it drives minds to be undeniable\",\n    answer: \"eldtritc\",\n    image_index: 171,\n  },\n  28: {\n    question:\n      \"You can drop me from the tallest building and I\u2019ll be fine, but if you drop me in water I die.\",\n    answer: \"paper\",\n    image_index: 48,\n  },\n  29: {\n    question:\n      \"An incantation of magic, that's cast with a word, It weaves the arcane, to do what's preferred\",\n    answer: \"spell\",\n    image_index: 136,\n  },\n  30: {\n    question:\n      \"A final resting place, for the dead to lie, Beneath the cold earth, until the sky\",\n    answer: \"headston\",\n    image_index: 131,\n  },\n  31: {\n    question:\n      \"With wings like a cloak, it flies through the night, Echolocation guiding, its hunt for delight\",\n    answer: \"bat\",\n    image_index: 163,\n  },\n  32: {\n    question:\n      \"A symbol of strength, and a fierce wild force, What am I, a hunter, of course.\",\n    answer: \"bear\",\n    image_index: 167,\n  },\n  33: {\n    question:\n      \"A master of survival, in pond and in land, What am I, a creature, with legs so grand?\",\n    answer: \"toad\",\n    image_index: 156,\n  },\n  34: {\n    question: \"A key to adventure, and discovery untold, What am I  to unfold?\",\n    answer: \"map\",\n    image_index: 51,\n  },\n  35: {\n    question:\n      \"A shell for the head, protection it brings, For knights in battle, or for kings\",\n    answer: \"helmet\",\n    image_index: 103,\n  },\n  36: {\n    question:\n      \"A marker that points, to the path you should take, It guides the lost, and helps decisions to make\",\n    answer: \"post\",\n    image_index: 143,\n  },\n  37: {\n    question: \"What has a neck but no head?\",\n    answer: \"bottle\",\n    image_index: 40,\n  },\n  38: {\n    question:\n      \"A creature that barks, with a wag of its tail, It's a faithful friend, who'll never fail\",\n    answer: \"pooch\",\n    image_index: 165,\n  },\n  39: {\n    question:\n      \"A mixture of liquids, with magic inside,  It's bottled and brewed, with ingredients tried\",\n    answer: \"potion\",\n    image_index: 44,\n  },\n  40: {\n    question:\n      \"I have a hard shell, many legs and sometimes I fly, I can be found crawling or taking to the sky.\",\n    answer: \"beetle\",\n    image_index: 157,\n  },\n  41: {\n    question:\n      \"An apparition, a spirit so light, It haunts in the shadows, and gives us a fright\",\n    answer: \"phantom\",\n    image_index: 174,\n  },\n  42: {\n    question:\n      \"I am weightless, but you can see me. Put me in a bucket, and I\u2019ll make it lighter?\",\n    answer: \"hole\",\n    image_index: 20,\n  },\n  43: {\n    question: \"What has a head and a tail, but no body?\",\n    answer: \"coin\",\n    image_index: 121,\n  },\n  44: {\n    question:\n      \"I am not alive, but I can die. I don't have muscles, but I move. I don't have a mind, but I can think.\",\n    answer: \"robot\",\n    image_index: 182,\n  },\n  45: {\n    question:\n      \"A treasure of knowledge, and wisdom untold, What am I, a monument of words, from the ancient and old?\",\n    answer: \"tome\",\n    image_index: 52,\n  },\n  46: {\n    question: \"With a long, slender tail and pointy ears, I scurry and sneak without any fears.\",\n    answer: \"rat\",\n    image_index: 152,\n  },\n  47: {\n    question:\n      \"What is black when you buy it, red when you use it and gray when you throw it away?\",\n    answer: \"charcoal\",\n    image_index: 122,\n  },\n  48: {\n    question:\n      \"Dark and fiery, with horns on its head, It's a creature feared and often depicted as red.\",\n    answer: \"demon\",\n    image_index: 183,\n  },\n  49: {\n    question:\n      \"With a battle cry so fierce and bold, This brute with tusks and armor cold,\",\n    answer: \"orc\",\n    image_index: 179,\n  },\n};\n", "export const letter_to_code = {\n  a: [0, 0, 0, 0],\n  b: [0, 0, 0, 1],\n  c: [0, 0, 1, 0],\n  d: [0, 0, 1, 1],\n  e: [0, 1, 0, 0],\n  f: [0, 1, 0, 1],\n  /**\n   * no g\n   */\n  h: [0, 1, 1, 0],\n  i: [0, 1, 1, 1],\n  /**\n   * no j or k\n   */\n  l: [1, 0, 0, 0],\n  m: [1, 0, 0, 1],\n  n: [1, 0, 1, 0],\n  o: [1, 0, 1, 1],\n  p: [1, 1, 0, 0],\n  r: [1, 1, 0, 1],\n  s: [1, 1, 1, 0],\n  t: [1, 1, 1, 1],\n  /**\n   * no u through z\n   */\n};\n\nexport const answer_to_byte_pattern = (answer: string) => {\n  const lowercase = answer.toLowerCase();\n  const pattern: number[] = [];\n  for (let i = 0; i < 8; i++) {\n    const letter = lowercase[i] ?? \"a\";\n    const code = letter_to_code[letter] ?? letter_to_code[\"a\"];\n    pattern.push(...code);\n  }\n  return pattern;\n};\n", "import { Tensor } from \"onnxruntime-web\";\nimport { answer_to_byte_pattern } from \"./answer_to_byte_pattern\";\n\nexport const adjust_samples_for_current_guess = (\n  answer: string,\n  current_guess: string,\n  samples: Tensor\n) => {\n  const byte_pattern = answer_to_byte_pattern(answer);\n  const current_guess_pattern = answer_to_byte_pattern(current_guess);\n\n  let current_sample_index = 0;\n  let times_through_all_samples = 0;\n  for (let i = 0; i < byte_pattern.length; i++) {\n    /**\n     * Iterate through the samples until we find a sample that\n     * matches the current byte pattern. this will ensure that\n     * the correct answer will generate the correct image\n     */\n    while (true) {\n      const sample_data = (samples.data as Int16Array)[current_sample_index];\n      current_sample_index++;\n      if (current_sample_index >= samples.dims[0]) {\n        current_sample_index = 0;\n        times_through_all_samples++;\n        if (times_through_all_samples > 2) {\n          break;\n        }\n      }\n      const value = (sample_data & 0xc000) >> 14;\n      switch (value) {\n        case 0:\n          if (byte_pattern[i] != 0) {\n            continue;\n          }\n          break;\n        case 3:\n          if (byte_pattern[i] != 1) {\n            continue;\n          }\n          break;\n        default:\n          continue;\n      }\n\n      (samples.data as Int16Array)[current_sample_index] =\n        (sample_data & 0x3fff) |\n        ((current_guess_pattern[i] == 1 ? 3 : 0) << 14);\n      break;\n    }\n  }\n  return samples;\n};\n", "import { letter_to_code } from \"./answer_to_byte_pattern\";\n\nexport const filter_text_input = (input: string) => {\n  let new_text = Array.from(input.toLowerCase())\n    .filter((char) => letter_to_code[char] !== undefined)\n    .join(\"\");\n  if (new_text.length > 8) {\n    new_text = new_text.slice(0, 8);\n  }\n  return new_text;\n};\n", "import { ComputerController } from \"./ComputerController\";\nimport { Controller } from \"./Controller\";\n\nlet controller: Controller | null = null;\nlet computer_controller: ComputerController | null = null;\n\nexport const get_controller = () => {\n  return controller;\n};\n\nexport const set_controller = (new_controller: Controller) => {\n  controller = new_controller;\n};\nexport const set_computer_controller = (new_controller: ComputerController) => {\n  computer_controller = new_controller;\n};\n\nexport const get_computer_controller = () => {\n  return computer_controller;\n};\n", "import { get_models_and_data } from \"./get_models_and_data\";\nexport declare const ort: typeof import(\"onnxruntime-web\");\nimport { Tensor, InferenceSession } from \"onnxruntime-web\";\nimport { Reconstruction } from \"./Reconstruction\";\nimport { load_image } from \"./load_image\";\nimport { image_to_samples } from \"./image_to_samples\";\nimport { puzzles } from \"./puzzles\";\nimport { adjust_samples_for_current_guess } from \"./adjust_samples_for_current_guess\";\nimport { filter_text_input } from \"./filter_text_input\";\nimport { get_computer_controller } from \"./globals\";\n\nexport class Controller {\n  canvas: HTMLCanvasElement = document.getElementById(\n    \"canvas\"\n  ) as HTMLCanvasElement;\n  context: CanvasRenderingContext2D = this.canvas.getContext(\"2d\")!;\n\n  color_data: ImageData;\n\n  samples: Tensor;\n  model: InferenceSession;\n  reconstruct: InferenceSession;\n  sample_func: InferenceSession;\n  reconstruction: Reconstruction | null = null;\n\n  // puzzle_index = 1; // Math.floor(Math.random() * puzzles.length);\n  // image_index = 29; //Math.floor(Math.random() * 25 * 8);\n\n  puzzle_index = Math.floor(Math.random() * Object.keys(puzzles).length);\n\n  tileset = load_image(\"static/fantasy-tileset.png\");\n  image_data_canvas = document.createElement(\"canvas\");\n  image_data_context = this.image_data_canvas.getContext(\"2d\")!;\n\n  solve_count = 0;\n  current_guess = \"\";\n  question_box = document.getElementById(\"question-box\") as HTMLDivElement;\n  left_button = document.getElementById(\"left-button\") as HTMLButtonElement;\n  right_button = document.getElementById(\"right-button\") as HTMLButtonElement;\n  win_status = document.getElementById(\"win-status\") as HTMLDivElement;\n\n  terminal_input = document.getElementById(\n    \"terminal-input\"\n  ) as HTMLTextAreaElement;\n\n  constructor(\n    data: Awaited<ReturnType<typeof get_models_and_data>>,\n    public readonly test_size: number\n  ) {\n    this.canvas.width = test_size;\n    this.canvas.height = test_size;\n    this.samples = data.samples;\n    this.model = data.model;\n    this.reconstruct = data.reconstruct;\n    this.sample_func = data.sample_func;\n    this.color_data = this.context.createImageData(test_size, test_size);\n    this.image_data_canvas.width = 32;\n    this.image_data_canvas.height = 32;\n    this.image_data_context.imageSmoothingEnabled = false;\n    this.re_run_reconstruction();\n    this.setup_question_box();\n\n    this.terminal_input.addEventListener(\"input\", this.on_input_change);\n    this.left_button.addEventListener(\"click\", this.on_previous);\n    this.right_button.addEventListener(\"click\", this.on_next);\n    requestAnimationFrame(this.update_and_draw);\n  }\n\n  on_previous = () => {\n    let next_index = this.puzzle_index - 1;\n    if (next_index < 0) {\n      next_index = Object.keys(puzzles).length - 1;\n    }\n    this.move_to_new_index(next_index);\n  };\n  on_next = () => {\n    this.move_to_new_index(\n      (this.puzzle_index + 1) % Object.keys(puzzles).length\n    );\n  };\n  move_to_new_index = (index: number) => {\n    this.puzzle_index = index;\n    const { solved, answer } = puzzles[this.puzzle_index];\n    const guess = solved ? answer : \"\";\n    this.terminal_input.value = guess;\n    this.current_guess = guess;\n    this.setup_question_box();\n    this.re_run_reconstruction();\n  };\n\n  on_input_change = () => {\n    const filtered_input = filter_text_input(this.terminal_input.value);\n    if (filtered_input !== this.terminal_input.value) {\n      this.terminal_input.value = filtered_input;\n    }\n\n    this.current_guess = filtered_input;\n    this.check_answer();\n    this.re_run_reconstruction();\n  };\n\n  check_answer = () => {\n    const puzzle = puzzles[this.puzzle_index];\n    const { solved, answer } = puzzle;\n    if (solved) {\n      /**\n       * can't solve it twice\n       */\n      return;\n    }\n    const guess_substring = this.current_guess.substring(0, answer.length);\n    if (guess_substring !== answer) {\n      return;\n    }\n    puzzle.solved = true;\n    this.setup_question_box();\n    this.solve_count += 1;\n    get_computer_controller()?.on_puzzle_solved();\n    this.win_status.innerText = `#solved: ${this.solve_count}`;\n    if (this.solve_count === 7) {\n      this.win_status.innerText = \"Press the big button!\";\n      get_computer_controller()?.play_win_animation();\n    }\n    if (this.solve_count === Object.keys(puzzles).length) {\n      this.win_status.innerText = \"Solved all puzzles!\";\n    }\n  };\n  setup_question_box = () => {\n    const { solved, question } = puzzles[this.puzzle_index];\n    this.question_box.innerText =\n      `#${this.puzzle_index}:${solved ? \" \u2713 solved\" : \"\"}\\n` + question;\n  };\n\n  re_run_reconstruction = async () => {\n    const { answer, image_index } = puzzles[this.puzzle_index];\n\n    const column = image_index % 8;\n    const row = Math.floor(image_index / 8);\n    this.samples = await image_to_samples(\n      this.tileset,\n      column * 32,\n      row * 32,\n      32,\n      32,\n      this.image_data_context,\n      this.sample_func\n    );\n    this.samples = adjust_samples_for_current_guess(\n      answer,\n      this.current_guess,\n      this.samples\n    );\n    this.reconstruction = new Reconstruction(\n      this.test_size,\n      this.samples,\n      this.model,\n      this.reconstruct,\n      50\n    );\n  };\n\n  update_and_draw = async () => {\n    await this.update();\n    await this.draw();\n    requestAnimationFrame(this.update_and_draw);\n  };\n  update = async () => {\n    if (this.reconstruction === null) {\n      return;\n    }\n    await this.reconstruction.update();\n  };\n  draw = async () => {\n    if (this.reconstruction === null) {\n      return;\n    }\n    await this.reconstruction.draw(this.color_data);\n    this.context.putImageData(this.color_data, 0, 0);\n  };\n}\n", "declare const ort: typeof import(\"onnxruntime-web\");\n\nexport const load_tensor = async (path: string) => {\n  const response = await fetch(path);\n  const array_buffer = await response.arrayBuffer();\n\n  const float_array = new Float32Array(array_buffer);\n  console.log(float_array.length);\n\n  for (let i = 0; i < 50; i++) {\n    float_array[i] = 0;\n  }\n\n  return new ort.Tensor(float_array);\n};\n", "import { load_tensor } from \"./load_tensor\";\nexport declare const ort: typeof import(\"onnxruntime-web\");\n\nexport const get_models_and_data = async (size: number) => {\n  const start_time = performance.now();\n  const num = size.toString().padStart(2, \"0\");\n  const [samples, model, reconstruct, sample_func] = await Promise.all([\n    load_tensor(`static/samples_${num}.bin`),\n    ort.InferenceSession.create(`static/web_gradient_descent_${num}.onnx`, {}),\n    ort.InferenceSession.create(`static/web_reconstruction_${num}.onnx`),\n    ort.InferenceSession.create(`static/web_sample_${num}.onnx`),\n  ]);\n  console.log(performance.now() - start_time);\n  console.log(\"session created\");\n\n  return {\n    samples,\n    model,\n    reconstruct,\n    sample_func,\n  };\n};\n", "import { ComputerController } from \"./ComputerController\";\nimport { Controller } from \"./Controller\";\nimport { get_models_and_data } from \"./get_models_and_data\";\nimport { set_computer_controller, set_controller } from \"./globals\";\n\nwindow.onload = async () => {\n  set_computer_controller(new ComputerController());\n  const test_size = 32;\n  const data = await get_models_and_data(test_size);\n  document.getElementById(\"interactive-box\")!.style.display = \"flex\";\n  set_controller(new Controller(data, test_size));\n};\n"],
  "mappings": ";;AAMA,MAAM,iBAAiB;AAAA,IACrB,MAAM;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,IACN;AAAA,IACA,OAAO;AAAA,MACL,IAAI;AAAA,MACJ,IAAI;AAAA,IACN;AAAA,IACA,KAAK;AAAA,MACH,IAAI;AAAA,MACJ,IAAI;AAAA,IACN;AAAA,EACF;AAOO,MAAM,YAAY,CACvB,EAAE,SAAS,YAAY,GACvB,SACG;AACH,UAAM,EAAE,IAAI,GAAG,IAAI,eAAe,KAAK,KAAK;AAC5C,UAAM,QAAQ,KAAK,IAAI,IAAI,KAAK,MAAM,KAAM,KAAK,MAAO,CAAC;AACzD,UAAM,IAAI,KAAM,QAAQ,IAAK;AAC7B,UAAM,IAAI,KAAK,KAAK,MAAM,QAAQ,CAAC,IAAI;AACvC,YAAQ,UAAU,aAAa,GAAG,GAAG,IAAI,IAAI,KAAK,GAAG,KAAK,GAAG,IAAI,EAAE;AAAA,EACrE;;;ACnCO,MAAM,aAAa,CAAC,SAAiB;AAC1C,UAAM,QAAQ,IAAI,MAAM;AACxB,UAAM,MAAM;AACZ,WAAO;AAAA,EACT;;;ACJO,MAAM,WAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;;;ACA5K,MAAMA,YAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;;;ACA5Q,MAAMC,YAAW;AAAA,IACtxU,MAAMC,YAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;;;ACAjhW,MAAMC,YAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;;;ACA5Q,MAAMC,YAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;;;ACAxR,MAAMC,aAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;;;ACAnD,MAAMC,aAAW,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC;;;ACA3D,MAAMC,aAAW,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC;;;ACA5D,MAAMC,aAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;;;ACAhE,MAAMC,aAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;;;ACAhE,MAAMC,atV,MAAMC,aAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;;;ACAxL,MAAMC,aAAW,CAAC,CAAC,KAAK,GAAG,GAAG,CA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CF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAAA,IACA,IAAI;AAAA,MACF,UACE;AAAA,MACF,QAAQ;AA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",
  "names": ["vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices", "vertices"]
}
